# Generated by Django 3.2.4 on 2022-04-12 08:50

import datetime
import re

import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Exam",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("paper_id", models.IntegerField(verbose_name="试卷id")),
                (
                    "create_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "start_time",
                    models.DateTimeField(blank=True, null=True, verbose_name="开始时间"),
                ),
                (
                    "end_time",
                    models.DateTimeField(blank=True, null=True, verbose_name="截止时间"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "草稿"),
                            ("RELEASE", "已发布"),
                            ("MARKED", "已批阅"),
                        ],
                        max_length=10,
                        verbose_name="卷子状态",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Paper",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "types",
                    models.CharField(
                        choices=[("EXERCISE", "练习卷"), ("EXAM", "测试卷")],
                        max_length=10,
                        verbose_name="试卷类型",
                    ),
                ),
                ("course_id", models.IntegerField(verbose_name="卷子所属课程id")),
                ("paper_name", models.CharField(max_length=255, verbose_name="卷子名称")),
                ("teacher", models.CharField(max_length=90, verbose_name="教师姓名")),
                (
                    "question_order",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=200,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:\\,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                        verbose_name="存储题目顺序",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("course_id", models.IntegerField(verbose_name="题目所属课程id")),
                (
                    "types",
                    models.CharField(
                        choices=[
                            ("SINGLE", "单选题"),
                            ("MULTIPLE", "多选题"),
                            ("COMPLETION", "填空题"),
                            ("JUDGE", "判断题"),
                            ("SHORT_ANSWER", "简答题"),
                        ],
                        max_length=20,
                        verbose_name="题目类型",
                    ),
                ),
                ("question", models.TextField(verbose_name="题目")),
                (
                    "question_url",
                    models.TextField(blank=True, null=True, verbose_name="题目文件url"),
                ),
                (
                    "option_A",
                    models.TextField(blank=True, null=True, verbose_name="选项A"),
                ),
                (
                    "option_B",
                    models.TextField(blank=True, null=True, verbose_name="选项B"),
                ),
                (
                    "option_C",
                    models.TextField(blank=True, null=True, verbose_name="选项C"),
                ),
                (
                    "option_D",
                    models.TextField(blank=True, null=True, verbose_name="选项D"),
                ),
                (
                    "option_E",
                    models.TextField(blank=True, null=True, verbose_name="选项E"),
                ),
                ("answer", models.TextField(verbose_name="问题答案")),
                (
                    "answer_url",
                    models.TextField(blank=True, null=True, verbose_name="问题答案文件url"),
                ),
                (
                    "explain",
                    models.TextField(
                        blank=True, default="无", null=True, verbose_name="答案解析"
                    ),
                ),
                (
                    "explain_url",
                    models.TextField(blank=True, null=True, verbose_name="答案解析文件url"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QuestionTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tag_value", models.CharField(max_length=20, verbose_name="标签值")),
                ("tag_color", models.CharField(max_length=7, verbose_name="标签颜色")),
                ("tag_text", models.CharField(max_length=200, verbose_name="标签说明")),
                (
                    "time_created",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="创建时间"
                    ),
                ),
                (
                    "time_updated",
                    models.DateTimeField(auto_now=True, verbose_name="修改时间"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QuestionTagContact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user_id", models.BigIntegerField(verbose_name="用户id")),
                ("tag_id", models.BigIntegerField(verbose_name="标签id")),
            ],
        ),
        migrations.CreateModel(
            name="StudentExamAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("student_id", models.BigIntegerField(verbose_name="用户id")),
                ("exam_id", models.IntegerField(verbose_name="考试id")),
                ("stu_answers", models.JSONField(verbose_name="学生提交答案")),
                ("individual_score", models.JSONField(verbose_name="学生题目单项得分")),
                (
                    "total_score",
                    models.FloatField(
                        blank=True, default=0, null=True, verbose_name="学生总体得分"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StudentExamContact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("course_id", models.IntegerField(verbose_name="课程id")),
                ("paper_id", models.IntegerField(verbose_name="卷子id")),
                ("student_id", models.TextField(verbose_name="学生id")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("NOT_ANSWER", "未答题"),
                            ("SAVED", "已保存"),
                            ("SUBMITTED", "已提交"),
                            ("MARKED", "已批改"),
                        ],
                        max_length=10,
                        verbose_name="状态",
                    ),
                ),
                (
                    "score",
                    models.FloatField(
                        blank=True, default=0, null=True, verbose_name="总分"
                    ),
                ),
                (
                    "cumulative_time",
                    models.DurationField(
                        default=datetime.timedelta(0), verbose_name="答题累计时间"
                    ),
                ),
            ],
        ),
    ]
